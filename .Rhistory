scale_x_continuous(breaks=seq(0.05, 0.95, 0.1) ) +
scale_y_continuous(breaks=seq(0.05, 0.95, 0.1) ) +
scale_fill_gradient(high="darkgreen", low="pink") +
coord_fixed(ratio=1) +
labs(x = "Proportion of WT HSC (PBS)",
y = "Proportion of WT HSC (LPS + IL-10R blocker)",
fill = "Difference in \nProportions",
title = paste0("Power = 0.8")) +
theme_bw()
power_list[["0.8"]] %>%
filter(difference >0.5 & difference < 0.8) %>%
ggplot(., aes(x = p1, y = p2, fill=difference)) +
geom_tile(show.legend=T) +
geom_text(aes(x = p1, y = p2, label = ceiling(n)), col = "white", fontface = "bold") +
scale_x_continuous(breaks=seq(0.05, 0.95, 0.1) ) +
scale_y_continuous(breaks=seq(0.05, 0.95, 0.1) ) +
scale_fill_gradient(high="darkgreen", low="pink") +
coord_fixed(ratio=1) +
labs(x = "Proportion of WT HSC (PBS)",
y = "Proportion of WT HSC (LPS + IL-10R blocker)",
fill = "Difference in \nProportions",
title = paste0("Power = 0.8")) +
theme_bw()
power_list[["0.8"]] %>%
filter(difference >0.5 & difference < 0.7) %>%
ggplot(., aes(x = p1, y = p2, fill=difference)) +
geom_tile(show.legend=T) +
geom_text(aes(x = p1, y = p2, label = ceiling(n)), col = "white", fontface = "bold") +
scale_x_continuous(breaks=seq(0.05, 0.95, 0.1) ) +
scale_y_continuous(breaks=seq(0.05, 0.95, 0.1) ) +
scale_fill_gradient(high="darkgreen", low="pink") +
coord_fixed(ratio=1) +
labs(x = "Proportion of WT HSC (PBS)",
y = "Proportion of WT HSC (LPS + IL-10R blocker)",
fill = "Difference in \nProportions",
title = paste0("Power = 0.8")) +
theme_bw()
power_list[["0.8"]] %>%
filter(difference < 0.25) %>%
ggplot(., aes(x = p1, y = p2, fill=difference)) +
geom_tile(show.legend=T) +
geom_text(aes(x = p1, y = p2, label = ceiling(n)), col = "white", fontface = "bold") +
scale_x_continuous(breaks=seq(0.05, 0.95, 0.1) ) +
scale_y_continuous(breaks=seq(0.05, 0.95, 0.1) ) +
scale_fill_gradient(high="darkgreen", low="pink") +
coord_fixed(ratio=1) +
labs(x = "Proportion of WT HSC (PBS)",
y = "Proportion of WT HSC (LPS + IL-10R blocker)",
fill = "Difference in \nProportions",
title = paste0("Power = 0.8")) +
theme_bw()
power_list[["0.8"]] %>%
filter(difference < 0.25)
tinytex::install_tinytex()
setwd("~/Google Drive/Research/Circadian")
ls
list.files()
devtools
devtools::create("tauFisher")
devtools::document()
getwd()
devtools::document()
getwd()
setwd("tauFisher")
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::use_vignette('Introduction')
usethat::use_vignette("introduction")
install.packages("usethat")
usethat::use_vignette("introduction")
usethis::use_vignette("Introduction")
devtools::check()
devtools::check()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::install()
find_periodic_genes
devtools::load_all()
find_periodic_genes
meta2d_file = "../inst/extdata/GSE157077_full_adj_meta2d/meta2d_GSE157077_full_adj.txt"
genes = find_periodic_genes(input_file=meta2d_file,
test_genes=rownames(pseudobulk_data),
per_method=c("LS", "JTK"),
thres=1)
print(genes)
devtools::document()
devtools::load_all()
devtools::install()
devtools::load_all
devtools::load_all()
devtools::document()
devtools::load_all()
library(tauFisher)
library(dplyr)
set.seed(123)
bulk_file <- system.file("extdata", "GSE157077_mouse_scn_control.tsv",
package = "tauFisher", mustWork = TRUE)
bulk_data <- utils::read.delim(file = bulk_file, stringsAsFactors = FALSE)
print(dim(bulk_data))
print(bulk_data[1:5, 1:5])
# Take the average expression if there are non-unique genes
bulk <- bulk_data[stats::complete.cases(bulk_data[,-1]), ] %>%
dplyr::mutate(ID = toupper(ID)) %>%
dplyr::group_by(ID) %>%
dplyr::summarise_all(mean)  %>%
as.data.frame()
# Set the rownames to be the genes and remove the ID column
rownames(bulk) <- bulk$ID
bulk <- bulk[,-1]
time <- as.numeric(vapply(stringr::str_split(colnames(bulk), "_"),
'[', 2, FUN.VALUE = character(1)) )
replicate <- as.numeric(vapply(stringr::str_split(colnames(bulk), "_"),
'[', 4, FUN.VALUE = character(1)) )
# adjust time - each replicate is now the next 'period' so there's 3 sets
time_adj <- time + 24*(as.numeric(replicate) - 1)
bulk_adj = bulk
colnames(bulk_adj) <- time_adj
bulk_adj = bulk_adj[, order(as.numeric(colnames(bulk_adj)))]
time_adj <- time_adj[order(as.numeric(time_adj))]
pseudobulk_data[is.na(pseudobulk_data)] <- 0
pseudobulk_file <- system.file("extdata", "GSE132608_scn_pseudobulk.RData",
package = "tauFisher", mustWork = TRUE)
load(pseudobulk_file)
print(dim(pseudobulk_data))
print(pseudobulk_data[1:5, 1:5])
pseudobulk_data[is.na(pseudobulk_data)] <- 0
pseudobulk_time <- as.numeric(vapply(stringr::str_split(colnames(pseudobulk_data), "CT"),
'[', 2, FUN.VALUE = character(1)))
# View the inputs
print(bulk_adj[1:5, 1:5])
print(time_adj)
# Don't set a threshold for p-value
meta2d_file = "../inst/extdata/GSE157077_full_adj_meta2d/meta2d_GSE157077_full_adj.txt"
genes = find_periodic_genes(input_file=meta2d_file,
test_genes=rownames(pseudobulk_data),
per_method=c("LS", "JTK"),
thres=1)
print(genes)
# Capitalize all gene names to standardize format
rownames(bulk_adj) <- toupper(rownames(bulk_adj))
# Subset
chosen_genes <- genes$JTK[genes$JTK %in% rownames(bulk_adj)]
bulk_subset <- t(data.frame(bulk_adj[chosen_genes, ]))
rownames(bulk_subset) <- time_adj
# Order the genes
chosen_genes <- chosen_genes[order(chosen_genes)]
bulk_subset <- bulk_subset[, order(colnames(bulk_subset))]
print(chosen_genes)
# log2 transform
bulk_log <- log2(bulk_subset+1)
# Convert time to 24 hours
train_time24 <- convert_to_24hr(time_adj)
time_adj
train_time24
nrep = 3 # number of replicates
fda_expression = get_FDAcurves(dat=bulk_log,
time=time_adj,
numbasis=5) %>%
dplyr::mutate(time_24 = fda_time - 24*floor(fda_time/24)) %>%
dplyr::mutate(time_label = paste0(time_24, "_",
rep((max(nrep)+1):(max(nrep)+max(nrep)),
each = 24, length = nrow(.))))
new_fda_rownames = fda_expression$time_label
print(head(fda_expression))
# Remove the unnecessary columns
fda_expression2 = fda_expression[, -c(1, ncol(fda_expression)-1, ncol(fda_expression))]
print(fda_expression2[1:5, 1:5])
# Create the differences matrix and filter out unnecessary pairs
fda_diff <- create_DiffMatrix(chosen_genes, fda_expression2)
fda_diff_filtered = filter_DiffMatrix(fda_diff)
fda_diff_scaled = scale_DiffMatrix(fda_diff_filtered)
fda_mat = as.matrix(fda_diff_scaled)
# Set up train data for PCA
train = fda_mat
rownames(train) = new_fda_rownames
train_time = fda_expression$time_24
# PCA
X_PCA <- train
X_PCA <- as.data.frame(X_PCA)
X_PCA$CT <- train_time
pc <- stats::prcomp(X_PCA[, -ncol(X_PCA)], scale = FALSE)
ndims = 2
pc_data <- data.frame(pc$x[,1:ndims])
# Get the times and relevel them so the smallest CT is the reference level
pc_data$CT24 <- as.numeric(vapply(stringr::str_split(rownames(pc_data), pattern = '_'),
'[', 1, FUN.VALUE = character(1) ))
pc_data$CT24_relevel <- stats::relevel(factor(pc_data$CT24),
ref = as.character(min(train_time)))
mod <- nnet::multinom(CT24_relevel ~ PC1 + PC2, data = pc_data, trace=T)
# View test inputs
print(pseudobulk_data[1:5, 1:5])
print(pseudobulk_time)
# Subset the data on the chosen genes
rownames(pseudobulk_data) <- toupper(rownames(pseudobulk_data))
pseudobulk_subset <- t(data.frame(pseudobulk_data[chosen_genes, ]))
# Order the genes
pseudobulk_subset <- pseudobulk_subset[, order(colnames(pseudobulk_subset))]
# log2 transform
pseudobulk_log <- log2(pseudobulk_subset+1)
# Convert time to 24 hours
test_time24 <- convert_to_24hr(pseudobulk_time)
pseudobulk_diff <- create_DiffMatrix(chosen_genes, pseudobulk_log)
pseudobulk_diff_filtered = filter_DiffMatrix(pseudobulk_diff)
pseudobulk_diff_scaled = scale_DiffMatrix(pseudobulk_diff_filtered)
# Project data onto PCA space
pc_pred <- stats::predict(pc, newdata = pseudobulk_diff_scaled)
# Predict
pred_vals = stats::predict(mod, newdata = pc_pred[,1:ndims])
pred_vals = as.numeric(as.character(pred_vals))
print(pred_vals)
calc_error(truth=pseudobulk_time, pred=pred_vals)
create_DiffMatrix
filter_DiffMatrix
scale_DiffMatrix
stats::prcomp
devtools::document()
devtools::load_all()
devtools::install()
devtools::load_all()
library(tauFisher)
library(dplyr)
set.seed(123)
datafile <- system.file("extdata", "GSE157077_mouse_scn_control.tsv",
package = "tauFisher", mustWork = TRUE)
data <- utils::read.delim(file = datafile, stringsAsFactors = FALSE)
print(dim(data))
print(data[1:5, 1:5])
# Take the average expression if there are non-unique genes
df <- data[stats::complete.cases(data[,-1]), ] %>%
dplyr::mutate(ID = toupper(ID)) %>%
dplyr::group_by(ID) %>%
dplyr::summarise_all(mean)  %>%
as.data.frame()
# Set the rownames to be the genes and remove the ID column
rownames(df) <- df$ID
df <- df[,-1]
time <- as.numeric(vapply(stringr::str_split(colnames(df), "_"),
'[', 2, FUN.VALUE = character(1)) )
replicate <- as.numeric(vapply(stringr::str_split(colnames(df), "_"),
'[', 4, FUN.VALUE = character(1)) )
# Set training index
train_idx <- which(replicate != 3)
# Subset train data
train_df <- df[, train_idx]
train_time <- time[train_idx]
# Subset test data
test_df <- df[, -train_idx]
test_time <- time[-train_idx]
run_metacycle(df=train_df,
timepoints=train_time,
out_file="../inst/extdata/GSE157077_train.txt",
out_dir="../inst/extdata/GSE157077_meta2d",
method=c("JTK", "LS") )
# Don't set a threshold for the p-value
meta2d_file = "../inst/extdata/GSE157077_meta2d/meta2d_GSE157077_train.txt"
genes = find_periodic_genes(input_file=meta2d_file,
test_genes=rownames(test_df),
per_method=c("LS", "JTK"),
thres=1.01)
print(genes)
trained_JTK <- train_tauFisher(periodic_genes=genes$JTK,
train_df=train_df,
train_time=train_time,
nrep=2,
numbasis=5)
result_JTK <- test_tauFisher(chosen_genes=trained_JTK$Genes,
test_df=test_df,
test_time=test_time,
pca_embedding=trained_JTK$PCA_embedding,
trained_model=trained_JTK$Model)
calc_error(result_JTK$truth, result_JTK$predicted)
train_time
replicate
train_time + 24*(as.numeric(replicate-1) - 1)
train_time + 24
24*(as.numeric(2) - 1)
24*(as.numeric(replicate) - 1)
replicate[replicate !=3]
24*(as.numeric(replicate[replicate != 3]) - 1)
train_time + 24*(as.numeric(replicate[replicate != 3]) - 1)
# Adjust time - each replicate is now the next 'period' so there's 2 sets
time_adj <- train_time + 24*(as.numeric(replicate[replicate != 3]) - 1)
train_adj = train_df
colnames(train_adj) <- time_adj
train_adj <- train_adj[, order(as.numeric(colnames(train_adj)))]
time_adj <- time_adj[order(as.numeric(time_adj))]
train_adj[1:10, 1:5]
time_adj
run_metacycle(df=train_adj,
timepoints=time_adj,
out_file="../inst/extdata/GSE157077_train_adj.txt",
out_dir="../inst/extdata/GSE157077_adj_meta2d",
method=c("JTK", "LS") )
run_metacycle(df=train_adj,
timepoints=time_adj,
out_file="../inst/extdata/GSE157077_train_adj.txt",
out_dir="../inst/extdata/GSE157077_adj_meta2d",
method=c("JTK", "LS") )
# Don't set a threshold for the p-value
meta2d_file = "../inst/extdata/GSE157077_adj_meta2d/meta2d_GSE157077_train_adj.txt"
genes = find_periodic_genes(input_file=meta2d_file,
test_genes=rownames(test_df),
per_method=c("LS", "JTK"),
thres=1.01)
print(genes)
trained_JTK <- train_tauFisher(periodic_genes=genes$JTK,
train_df=train_df,
train_time=train_time,
nrep=2,
numbasis=5)
result_JTK <- test_tauFisher(chosen_genes=trained_JTK$Genes,
test_df=test_df,
test_time=test_time,
pca_embedding=trained_JTK$PCA_embedding,
trained_model=trained_JTK$Model)
calc_error(result_JTK$truth, result_JTK$predicted)
trained_JTK <- train_tauFisher(periodic_genes=genes$JTK,
train_df=train_adj,
train_time=time_adj,
nrep=2,
numbasis=5)
trained_JTK$Genes
result_JTK <- test_tauFisher(chosen_genes=trained_JTK$Genes,
test_df=test_df,
test_time=test_time,
pca_embedding=trained_JTK$PCA_embedding,
trained_model=trained_JTK$Model)
calc_error(result_JTK$truth, result_JTK$predicted)
devtools::document()
devtools::document()
devtools::load_all()
devtools::install()
devtools::check()
devtools::document()
devtools::install()
library(tauFisher)
library(dplyr)
set.seed(123)
bulk_file <- system.file("extdata", "GSE157077_mouse_scn_control.tsv",
package = "tauFisher", mustWork = TRUE)
bulk_data <- utils::read.delim(file = bulk_file, stringsAsFactors = FALSE)
print(dim(bulk_data))
print(bulk_data[1:5, 1:5])
pseudobulk_file <- system.file("extdata", "GSE132608_scn_pseudobulk.RData",
package = "tauFisher", mustWork = TRUE)
load(pseudobulk_file)
print(dim(pseudobulk_data))
print(pseudobulk_data[1:5, 1:5])
# Take the average expression if there are non-unique genes
bulk <- bulk_data[stats::complete.cases(bulk_data[,-1]), ] %>%
dplyr::mutate(ID = toupper(ID)) %>%
dplyr::group_by(ID) %>%
dplyr::summarise_all(mean)  %>%
as.data.frame()
# Set the rownames to be the genes and remove the ID column
rownames(bulk) <- bulk$ID
bulk <- bulk[,-1]
time <- as.numeric(vapply(stringr::str_split(colnames(bulk), "_"),
'[', 2, FUN.VALUE = character(1)) )
replicate <- as.numeric(vapply(stringr::str_split(colnames(bulk), "_"),
'[', 4, FUN.VALUE = character(1)) )
# adjust time - each replicate is now the next 'period' so there's 3 sets
time_adj <- time + 24*(as.numeric(replicate) - 1)
bulk_adj = bulk
colnames(bulk_adj) <- time_adj
bulk_adj = bulk_adj[, order(as.numeric(colnames(bulk_adj)))]
time_adj <- time_adj[order(as.numeric(time_adj))]
pseudobulk_data[is.na(pseudobulk_data)] <- 0
pseudobulk_time <- as.numeric(vapply(stringr::str_split(colnames(pseudobulk_data), "CT"),
'[', 2, FUN.VALUE = character(1)))
# Don't set a threshold for p-value
meta2d_file = "../inst/extdata/GSE157077_full_adj_meta2d/meta2d_GSE157077_full_adj.txt"
genes = find_periodic_genes(input_file=meta2d_file,
test_genes=rownames(pseudobulk_data),
per_method=c("LS", "JTK"),
thres=1)
print(genes)
# Capitalize all gene names to standardize format
rownames(bulk_adj) <- toupper(rownames(bulk_adj))
# Subset
chosen_genes <- genes$JTK[genes$JTK %in% rownames(bulk_adj)]
bulk_subset <- t(data.frame(bulk_adj[chosen_genes, ]))
rownames(bulk_subset) <- time_adj
# Order the genes
chosen_genes <- chosen_genes[order(chosen_genes)]
bulk_subset <- bulk_subset[, order(colnames(bulk_subset))]
print(chosen_genes)
# log2 transform
bulk_log <- log2(bulk_subset+1)
nrep = 3 # number of replicates
fda_expression = get_FDAcurves(dat=bulk_log,
time=time_adj,
numbasis=5) %>%
dplyr::mutate(time_24 = fda_time - 24*floor(fda_time/24)) %>%
dplyr::mutate(time_label = paste0(time_24, "_",
rep((max(nrep)+1):(max(nrep)+max(nrep)),
each = 24, length = nrow(.))))
new_fda_rownames = fda_expression$time_label
print(head(fda_expression))
# Remove the unnecessary columns
fda_expression2 = fda_expression[, -c(1, ncol(fda_expression)-1, ncol(fda_expression))]
print(fda_expression2[1:5, 1:5])
# Create the differences matrix and filter out unnecessary pairs
fda_diff <- create_DiffMatrix(genes=chosen_genes, dat=fda_expression2)
fda_diff_filtered = filter_DiffMatrix(diffs=fda_diff)
fda_diff_scaled = scale_DiffMatrix(diffs=fda_diff_filtered)
fda_mat = as.matrix(fda_diff_scaled)
# Set up train data for PCA
train = fda_mat
rownames(train) = new_fda_rownames
train_time = fda_expression$time_24
# PCA
X_PCA <- train
X_PCA <- as.data.frame(X_PCA)
X_PCA$CT <- train_time
pc <- stats::prcomp(X_PCA[, -ncol(X_PCA)], scale = FALSE)
ndims = 2
pc_data <- data.frame(pc$x[,1:ndims])
# Get the times and relevel them so the smallest CT is the reference level
pc_data$CT24 <- as.numeric(vapply(stringr::str_split(rownames(pc_data), pattern = '_'),
'[', 1, FUN.VALUE = character(1) ))
pc_data$CT24_relevel <- stats::relevel(factor(pc_data$CT24),
ref = as.character(min(train_time)))
mod <- nnet::multinom(CT24_relevel ~ PC1 + PC2, data = pc_data, trace=T)
colnames(fda_diff_filtered)
gene_pairs = colnames(fda_diff_filtered)
vapply(stringr::str_split(gene_pairs), "_")
stringr::str_split(gene_pairs, "_")
unlist(stringr::str_split(gene_pairs, "_"))
unique(unlist(stringr::str_split(gene_pairs, "_")))
sort(unique(unlist(stringr::str_split(gene_pairs, "_"))))
chosen_genes
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::install()
time_adj
dim(bulk_log)
debug(get_FDAcurves)
get_FDAcurves(dat=bulk_log,
time=time_adj,
numbasis=5)
time
set.seed(seed_num)
basis = fda::create.fourier.basis(rangeval = range(time),
nbasis = numbasis, 24)
harmLfd = fda::vec2Lfd(c(0, (2 * pi/24)^2, 0), c(0, max(time)))
harmpar = fda::fdPar(basis, harmLfd, lambda = 1e-04)
basic_basis = fda::smooth.basis(time, matrix_fda, harmpar)
harmpar = fda::fdPar(basis, harmLfd, lambda = 1e-10)
pos.result.coef <- matrix(ncol = ncol(dat), nrow = numbasis)
str(basic_basis)
for (i in 1:ncol(dat)) {
data.to.pos = dat[, i]
group.pos = fda::smooth.pos(time, data.to.pos, harmpar,
dbglev = 0)
pos.result.coef[, i] = group.pos$Wfdobj$coefs
}
group.pos$Wfdobj$coefs <- pos.result.coef
group.pos$Wfdobj$fdnames$args <- basic_basis$fd$fdnames$time
group.pos$Wfdobj$fdnames$reps <- basic_basis$fd$fdnames$reps
group.pos$Wfdobj$fdnames$funs <- basic_basis$fd$fdnames$values
for (i in 1:ncol(dat)) {
data.to.pos = dat[, i]
group.pos = fda::smooth.pos(time, data.to.pos, harmpar,
dbglev = 0)
pos.result.coef[, i] = group.pos$Wfdobj$coefs
}
str(group.pos)
get_FDAcurves(dat=bulk_log,
time=time_adj,
numbasis=5)
fda_time
time
fda_time2 = seq(0, 23, by=1)
fda_time2
dim(fda_curves)
fda_curves[1:10, 1:10]
g2 = fda::eval.posfd(fda_time2, group.pos$Wfdobj)
colnames(g2) = colnames(dat)
data.frame(fda_time2, g2)
data.frame(fda_time2, g2)[1:10, 1:10]
data.frame(fda_time2, g2)[1:10, 1:9]
fda_curves[1:10, 1:9]
train_time
time
